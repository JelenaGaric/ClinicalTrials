// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model.Context;

namespace Model.Migrations
{
    [DbContext(typeof(ClinicalTrialsContext))]
    [Migration("20201209100353_Mig2")]
    partial class Mig2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Model.AdverseEventsModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EventGroupListId")
                        .HasColumnType("int");

                    b.Property<string>("EventsDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventsFrequencyThreshold")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventsTimeFrame")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OtherEventListId")
                        .HasColumnType("int");

                    b.Property<int?>("SeriousEventListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventGroupListId");

                    b.HasIndex("OtherEventListId");

                    b.HasIndex("SeriousEventListId");

                    b.ToTable("AdverseEventsModule");
                });

            modelBuilder.Entity("Model.AnnotationModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("UnpostedAnnotationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnpostedAnnotationId");

                    b.ToTable("AnnotationModule");
                });

            modelBuilder.Entity("Model.AnnotationSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnnotationModuleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnnotationModuleId");

                    b.ToTable("AnnotationSection");
                });

            modelBuilder.Entity("Model.ArmGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArmGroupDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ArmGroupInterventionListId")
                        .HasColumnType("int");

                    b.Property<string>("ArmGroupLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ArmGroupListId")
                        .HasColumnType("int");

                    b.Property<string>("ArmGroupType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArmGroupInterventionListId");

                    b.HasIndex("ArmGroupListId");

                    b.ToTable("ArmGroup");
                });

            modelBuilder.Entity("Model.ArmGroupInterventionList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArmGroupInterventionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ArmGroupInterventionList");
                });

            modelBuilder.Entity("Model.ArmGroupList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("ArmGroupList");
                });

            modelBuilder.Entity("Model.ArmsInterventionsModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArmGroupListId")
                        .HasColumnType("int");

                    b.Property<int?>("InterventionListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArmGroupListId");

                    b.HasIndex("InterventionListId");

                    b.ToTable("ArmsInterventionsModule");
                });

            modelBuilder.Entity("Model.AvailIPD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AvailIPDComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvailIPDId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AvailIPDListId")
                        .HasColumnType("int");

                    b.Property<string>("AvailIPDType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvailIPDURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AvailIPDListId");

                    b.ToTable("AvailIPD");
                });

            modelBuilder.Entity("Model.AvailIPDList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("AvailIPDList");
                });

            modelBuilder.Entity("Model.BaselineCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BaselineCategoryListId")
                        .HasColumnType("int");

                    b.Property<string>("BaselineCategoryTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BaselineMeasurementListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BaselineCategoryListId");

                    b.HasIndex("BaselineMeasurementListId");

                    b.ToTable("BaselineCategory");
                });

            modelBuilder.Entity("Model.BaselineCategoryList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("BaselineCategoryList");
                });

            modelBuilder.Entity("Model.BaselineCharacteristicsModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BaselineDenomListId")
                        .HasColumnType("int");

                    b.Property<int?>("BaselineGroupListId")
                        .HasColumnType("int");

                    b.Property<int?>("BaselineMeasureListId")
                        .HasColumnType("int");

                    b.Property<string>("BaselinePopulationDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaselineTypeUnitsAnalyzed")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaselineDenomListId");

                    b.HasIndex("BaselineGroupListId");

                    b.HasIndex("BaselineMeasureListId");

                    b.ToTable("BaselineCharacteristicsModule");
                });

            modelBuilder.Entity("Model.BaselineClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BaselineCategoryListId")
                        .HasColumnType("int");

                    b.Property<int?>("BaselineClassDenomListId")
                        .HasColumnType("int");

                    b.Property<int?>("BaselineClassListId")
                        .HasColumnType("int");

                    b.Property<string>("BaselineClassTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaselineCategoryListId");

                    b.HasIndex("BaselineClassDenomListId");

                    b.HasIndex("BaselineClassListId");

                    b.ToTable("BaselineClass");
                });

            modelBuilder.Entity("Model.BaselineClassDenom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BaselineClassDenomCountListId")
                        .HasColumnType("int");

                    b.Property<int?>("BaselineClassDenomListId")
                        .HasColumnType("int");

                    b.Property<string>("BaselineClassDenomUnits")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaselineClassDenomCountListId");

                    b.HasIndex("BaselineClassDenomListId");

                    b.ToTable("BaselineClassDenom");
                });

            modelBuilder.Entity("Model.BaselineClassDenomCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BaselineClassDenomCountGroupId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BaselineClassDenomCountListId")
                        .HasColumnType("int");

                    b.Property<string>("BaselineClassDenomCountValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaselineClassDenomCountListId");

                    b.ToTable("BaselineClassDenomCount");
                });

            modelBuilder.Entity("Model.BaselineClassDenomCountList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("BaselineClassDenomCountList");
                });

            modelBuilder.Entity("Model.BaselineClassDenomList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("BaselineClassDenomList");
                });

            modelBuilder.Entity("Model.BaselineClassList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("BaselineClassList");
                });

            modelBuilder.Entity("Model.BaselineDenom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BaselineDenomCountListId")
                        .HasColumnType("int");

                    b.Property<int?>("BaselineDenomListId")
                        .HasColumnType("int");

                    b.Property<string>("BaselineDenomUnits")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaselineDenomCountListId");

                    b.HasIndex("BaselineDenomListId");

                    b.ToTable("BaselineDenom");
                });

            modelBuilder.Entity("Model.BaselineDenomCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BaselineDenomCountGroupId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BaselineDenomCountListId")
                        .HasColumnType("int");

                    b.Property<string>("BaselineDenomCountValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaselineDenomCountListId");

                    b.ToTable("BaselineDenomCount");
                });

            modelBuilder.Entity("Model.BaselineDenomCountList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("BaselineDenomCountList");
                });

            modelBuilder.Entity("Model.BaselineDenomList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("BaselineDenomList");
                });

            modelBuilder.Entity("Model.BaselineGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BaselineGroupDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaselineGroupId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BaselineGroupListId")
                        .HasColumnType("int");

                    b.Property<string>("BaselineGroupTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaselineGroupListId");

                    b.ToTable("BaselineGroup");
                });

            modelBuilder.Entity("Model.BaselineGroupList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("BaselineGroupList");
                });

            modelBuilder.Entity("Model.BaselineMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BaselineClassListId")
                        .HasColumnType("int");

                    b.Property<string>("BaselineMeasureCalculatePct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BaselineMeasureDenomListId")
                        .HasColumnType("int");

                    b.Property<string>("BaselineMeasureDenomUnitsSelected")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaselineMeasureDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaselineMeasureDispersionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BaselineMeasureListId")
                        .HasColumnType("int");

                    b.Property<string>("BaselineMeasureParamType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaselineMeasurePopulationDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaselineMeasureTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaselineMeasureUnitOfMeasure")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaselineClassListId");

                    b.HasIndex("BaselineMeasureDenomListId");

                    b.HasIndex("BaselineMeasureListId");

                    b.ToTable("BaselineMeasure");
                });

            modelBuilder.Entity("Model.BaselineMeasureDenom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BaselineMeasureDenomCountListId")
                        .HasColumnType("int");

                    b.Property<int?>("BaselineMeasureDenomListId")
                        .HasColumnType("int");

                    b.Property<string>("BaselineMeasureDenomUnits")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaselineMeasureDenomCountListId");

                    b.HasIndex("BaselineMeasureDenomListId");

                    b.ToTable("BaselineMeasureDenom");
                });

            modelBuilder.Entity("Model.BaselineMeasureDenomCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BaselineMeasureDenomCountGroupId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BaselineMeasureDenomCountListId")
                        .HasColumnType("int");

                    b.Property<string>("BaselineMeasureDenomCountValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaselineMeasureDenomCountListId");

                    b.ToTable("BaselineMeasureDenomCount");
                });

            modelBuilder.Entity("Model.BaselineMeasureDenomCountList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("BaselineMeasureDenomCountList");
                });

            modelBuilder.Entity("Model.BaselineMeasureDenomList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("BaselineMeasureDenomList");
                });

            modelBuilder.Entity("Model.BaselineMeasureList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("BaselineMeasureList");
                });

            modelBuilder.Entity("Model.BaselineMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BaselineMeasurementComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaselineMeasurementGroupId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BaselineMeasurementListId")
                        .HasColumnType("int");

                    b.Property<string>("BaselineMeasurementLowerLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaselineMeasurementSpread")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaselineMeasurementUpperLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaselineMeasurementValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaselineMeasurementListId");

                    b.ToTable("BaselineMeasurement");
                });

            modelBuilder.Entity("Model.BaselineMeasurementList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("BaselineMeasurementList");
                });

            modelBuilder.Entity("Model.BioSpec", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BioSpecDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BioSpecRetention")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BioSpec");
                });

            modelBuilder.Entity("Model.CentralContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CentralContactEMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CentralContactListId")
                        .HasColumnType("int");

                    b.Property<string>("CentralContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CentralContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CentralContactPhoneExt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CentralContactRole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CentralContactListId");

                    b.ToTable("CentralContact");
                });

            modelBuilder.Entity("Model.CentralContactList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("CentralContactList");
                });

            modelBuilder.Entity("Model.CertainAgreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgreementOtherDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AgreementPISponsorEmployee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AgreementRestrictionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AgreementRestrictiveAgreement")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CertainAgreement");
                });

            modelBuilder.Entity("Model.CityCoordinates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LocationCity")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lng")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CityCoordinates");
                });

            modelBuilder.Entity("Model.ClinicalTrialJSON", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("JSON")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NCTId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JSONStudy");
                });

            modelBuilder.Entity("Model.Collaborator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CollaboratorClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CollaboratorListId")
                        .HasColumnType("int");

                    b.Property<string>("CollaboratorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CollaboratorListId");

                    b.ToTable("Collaborator");
                });

            modelBuilder.Entity("Model.CollaboratorList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("CollaboratorList");
                });

            modelBuilder.Entity("Model.CompletionDateStruct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompletionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompletionDateType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompletionDateStruct");
                });

            modelBuilder.Entity("Model.ConditionAncestor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConditionAncestorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConditionAncestorListId")
                        .HasColumnType("int");

                    b.Property<string>("ConditionAncestorTerm")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConditionAncestorListId");

                    b.ToTable("ConditionAncestor");
                });

            modelBuilder.Entity("Model.ConditionAncestorList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("ConditionAncestorList");
                });

            modelBuilder.Entity("Model.ConditionBrowseBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConditionBrowseBranchAbbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConditionBrowseBranchListId")
                        .HasColumnType("int");

                    b.Property<string>("ConditionBrowseBranchName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConditionBrowseBranchListId");

                    b.ToTable("ConditionBrowseBranch");
                });

            modelBuilder.Entity("Model.ConditionBrowseBranchList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("ConditionBrowseBranchList");
                });

            modelBuilder.Entity("Model.ConditionBrowseLeaf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConditionBrowseLeafAsFound")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConditionBrowseLeafId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConditionBrowseLeafListId")
                        .HasColumnType("int");

                    b.Property<string>("ConditionBrowseLeafName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConditionBrowseLeafRelevance")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConditionBrowseLeafListId");

                    b.ToTable("ConditionBrowseLeaf");
                });

            modelBuilder.Entity("Model.ConditionBrowseLeafList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("ConditionBrowseLeafList");
                });

            modelBuilder.Entity("Model.ConditionBrowseModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ConditionAncestorListId")
                        .HasColumnType("int");

                    b.Property<int?>("ConditionBrowseBranchListId")
                        .HasColumnType("int");

                    b.Property<int?>("ConditionBrowseLeafListId")
                        .HasColumnType("int");

                    b.Property<int?>("ConditionMeshListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConditionAncestorListId");

                    b.HasIndex("ConditionBrowseBranchListId");

                    b.HasIndex("ConditionBrowseLeafListId");

                    b.HasIndex("ConditionMeshListId");

                    b.ToTable("ConditionBrowseModule");
                });

            modelBuilder.Entity("Model.ConditionList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ConditionList");
                });

            modelBuilder.Entity("Model.ConditionMesh", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConditionMeshId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConditionMeshListId")
                        .HasColumnType("int");

                    b.Property<string>("ConditionMeshTerm")
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.HasKey("Id");

                    b.HasIndex("ConditionMeshListId");

                    b.ToTable("ConditionMesh");
                });

            modelBuilder.Entity("Model.ConditionMeshList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("ConditionMeshList");
                });

            modelBuilder.Entity("Model.ConditionsModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ConditionListId")
                        .HasColumnType("int");

                    b.Property<int?>("KeywordListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConditionListId");

                    b.HasIndex("KeywordListId");

                    b.ToTable("ConditionsModule");
                });

            modelBuilder.Entity("Model.ContactsLocationsModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CentralContactListId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationListId")
                        .HasColumnType("int");

                    b.Property<int?>("OverallOfficialListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CentralContactListId");

                    b.HasIndex("LocationListId");

                    b.HasIndex("OverallOfficialListId");

                    b.ToTable("ContactsLocationsModule");
                });

            modelBuilder.Entity("Model.DerivedSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ConditionBrowseModuleId")
                        .HasColumnType("int");

                    b.Property<int?>("InterventionBrowseModuleId")
                        .HasColumnType("int");

                    b.Property<int?>("MiscInfoModuleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConditionBrowseModuleId");

                    b.HasIndex("InterventionBrowseModuleId");

                    b.HasIndex("MiscInfoModuleId");

                    b.ToTable("DerivedSection");
                });

            modelBuilder.Entity("Model.DescriptionModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BriefSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DescriptionModule");
                });

            modelBuilder.Entity("Model.DesignInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DesignAllocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesignInterventionModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesignInterventionModelDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DesignMaskingInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("DesignObservationalModelListId")
                        .HasColumnType("int");

                    b.Property<string>("DesignPrimaryPurpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DesignTimePerspectiveListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DesignMaskingInfoId");

                    b.HasIndex("DesignObservationalModelListId");

                    b.HasIndex("DesignTimePerspectiveListId");

                    b.ToTable("DesignInfo");
                });

            modelBuilder.Entity("Model.DesignMaskingInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DesignMasking")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesignMaskingDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DesignWhoMaskedListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DesignWhoMaskedListId");

                    b.ToTable("DesignMaskingInfo");
                });

            modelBuilder.Entity("Model.DesignModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BioSpecId")
                        .HasColumnType("int");

                    b.Property<int?>("DesignInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("EnrollmentInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("ExpandedAccessTypesId")
                        .HasColumnType("int");

                    b.Property<string>("PatientRegistry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhaseListId")
                        .HasColumnType("int");

                    b.Property<string>("StudyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetDuration")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BioSpecId");

                    b.HasIndex("DesignInfoId");

                    b.HasIndex("EnrollmentInfoId");

                    b.HasIndex("ExpandedAccessTypesId");

                    b.HasIndex("PhaseListId");

                    b.ToTable("DesignModule");
                });

            modelBuilder.Entity("Model.DesignObservationalModelList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DesignObservationalModel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DesignObservationalModelList");
                });

            modelBuilder.Entity("Model.DesignTimePerspectiveList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DesignTimePerspective")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DesignTimePerspectiveList");
                });

            modelBuilder.Entity("Model.DesignWhoMaskedList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DesignWhoMasked")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DesignWhoMaskedList");
                });

            modelBuilder.Entity("Model.DispFirstPostDateStruct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DispFirstPostDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DispFirstPostDateType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DispFirstPostDateStruct");
                });

            modelBuilder.Entity("Model.DocumentSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LargeDocumentModuleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LargeDocumentModuleId");

                    b.ToTable("DocumentSection");
                });

            modelBuilder.Entity("Model.EligibilityModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EligibilityCriteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenderBased")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenderDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealthyVolunteers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaximumAge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinimumAge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SamplingMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StdAgeListId")
                        .HasColumnType("int");

                    b.Property<string>("StudyPopulation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StdAgeListId");

                    b.ToTable("EligibilityModule");
                });

            modelBuilder.Entity("Model.EnrollmentInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnrollmentCount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnrollmentType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EnrollmentInfo");
                });

            modelBuilder.Entity("Model.EventGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EventGroupDeathsNumAffected")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventGroupDeathsNumAtRisk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventGroupDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventGroupId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EventGroupListId")
                        .HasColumnType("int");

                    b.Property<string>("EventGroupOtherNumAffected")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventGroupOtherNumAtRisk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventGroupSeriousNumAffected")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventGroupSeriousNumAtRisk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventGroupTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventGroupListId");

                    b.ToTable("EventGroup");
                });

            modelBuilder.Entity("Model.EventGroupList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("EventGroupList");
                });

            modelBuilder.Entity("Model.ExpandedAccessInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExpandedAccessNCTId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpandedAccessStatusForNCTId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HasExpandedAccess")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExpandedAccessInfo");
                });

            modelBuilder.Entity("Model.ExpandedAccessTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExpAccTypeIndividual")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpAccTypeIntermediate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpAccTypeTreatment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExpandedAccessTypes");
                });

            modelBuilder.Entity("Model.FlowAchievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FlowAchievementComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlowAchievementGroupId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FlowAchievementListId")
                        .HasColumnType("int");

                    b.Property<string>("FlowAchievementNumSubjects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlowAchievementNumUnits")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FlowAchievementListId");

                    b.ToTable("FlowAchievement");
                });

            modelBuilder.Entity("Model.FlowAchievementList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("FlowAchievementList");
                });

            modelBuilder.Entity("Model.FlowDropWithdraw", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FlowDropWithdrawComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FlowDropWithdrawListId")
                        .HasColumnType("int");

                    b.Property<string>("FlowDropWithdrawType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FlowReasonListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlowDropWithdrawListId");

                    b.HasIndex("FlowReasonListId");

                    b.ToTable("FlowDropWithdraw");
                });

            modelBuilder.Entity("Model.FlowDropWithdrawList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("FlowDropWithdrawList");
                });

            modelBuilder.Entity("Model.FlowGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FlowGroupDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlowGroupId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FlowGroupListId")
                        .HasColumnType("int");

                    b.Property<string>("FlowGroupTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FlowGroupListId");

                    b.ToTable("FlowGroup");
                });

            modelBuilder.Entity("Model.FlowGroupList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("FlowGroupList");
                });

            modelBuilder.Entity("Model.FlowMilestone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FlowAchievementListId")
                        .HasColumnType("int");

                    b.Property<string>("FlowMilestoneComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FlowMilestoneListId")
                        .HasColumnType("int");

                    b.Property<string>("FlowMilestoneType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FlowAchievementListId");

                    b.HasIndex("FlowMilestoneListId");

                    b.ToTable("FlowMilestone");
                });

            modelBuilder.Entity("Model.FlowMilestoneList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("FlowMilestoneList");
                });

            modelBuilder.Entity("Model.FlowPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FlowDropWithdrawListId")
                        .HasColumnType("int");

                    b.Property<int?>("FlowMilestoneListId")
                        .HasColumnType("int");

                    b.Property<int?>("FlowPeriodListId")
                        .HasColumnType("int");

                    b.Property<string>("FlowPeriodTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FlowDropWithdrawListId");

                    b.HasIndex("FlowMilestoneListId");

                    b.HasIndex("FlowPeriodListId");

                    b.ToTable("FlowPeriod");
                });

            modelBuilder.Entity("Model.FlowPeriodList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("FlowPeriodList");
                });

            modelBuilder.Entity("Model.FlowReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FlowReasonComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlowReasonGroupId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FlowReasonListId")
                        .HasColumnType("int");

                    b.Property<string>("FlowReasonNumSubjects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlowReasonNumUnits")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FlowReasonListId");

                    b.ToTable("FlowReason");
                });

            modelBuilder.Entity("Model.FlowReasonList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("FlowReasonList");
                });

            modelBuilder.Entity("Model.FullStudy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int?>("StudyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudyId");

                    b.ToTable("FullStudy");
                });

            modelBuilder.Entity("Model.IPDSharingInfoTypeList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IPDSharingInfoType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IPDSharingInfoTypeList");
                });

            modelBuilder.Entity("Model.IPDSharingStatementModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IPDSharing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPDSharingAccessCriteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPDSharingDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IPDSharingInfoTypeListId")
                        .HasColumnType("int");

                    b.Property<string>("IPDSharingTimeFrame")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPDSharingURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IPDSharingInfoTypeListId");

                    b.ToTable("IPDSharingStatementModule");
                });

            modelBuilder.Entity("Model.IdentificationModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Acronym")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BriefTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NCTId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NCTIdAliasListId")
                        .HasColumnType("int");

                    b.Property<string>("OfficialTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrgStudyIdInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("SecondaryIdInfoListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NCTIdAliasListId");

                    b.HasIndex("OrgStudyIdInfoId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SecondaryIdInfoListId");

                    b.ToTable("IdentificationModule");
                });

            modelBuilder.Entity("Model.Intervention", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("InterventionListId")
                        .HasColumnType("int");

                    b.Property<string>("InterventionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InterventionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InterventionListId");

                    b.ToTable("Intervention");
                });

            modelBuilder.Entity("Model.InterventionAncestor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InterventionAncestorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InterventionAncestorListId")
                        .HasColumnType("int");

                    b.Property<string>("InterventionAncestorTerm")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InterventionAncestorListId");

                    b.ToTable("InterventionAncestor");
                });

            modelBuilder.Entity("Model.InterventionAncestorList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("InterventionAncestorList");
                });

            modelBuilder.Entity("Model.InterventionBrowseBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InterventionBrowseBranchAbbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InterventionBrowseBranchListId")
                        .HasColumnType("int");

                    b.Property<string>("InterventionBrowseBranchName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InterventionBrowseBranchListId");

                    b.ToTable("InterventionBrowseBranch");
                });

            modelBuilder.Entity("Model.InterventionBrowseBranchList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("InterventionBrowseBranchList");
                });

            modelBuilder.Entity("Model.InterventionBrowseLeaf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InterventionBrowseLeafAsFound")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InterventionBrowseLeafId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InterventionBrowseLeafListId")
                        .HasColumnType("int");

                    b.Property<string>("InterventionBrowseLeafName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InterventionBrowseLeafRelevance")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InterventionBrowseLeafListId");

                    b.ToTable("InterventionBrowseLeaf");
                });

            modelBuilder.Entity("Model.InterventionBrowseLeafList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("InterventionBrowseLeafList");
                });

            modelBuilder.Entity("Model.InterventionBrowseModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("InterventionAncestorListId")
                        .HasColumnType("int");

                    b.Property<int?>("InterventionBrowseBranchListId")
                        .HasColumnType("int");

                    b.Property<int?>("InterventionBrowseLeafListId")
                        .HasColumnType("int");

                    b.Property<int?>("InterventionMeshListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InterventionAncestorListId");

                    b.HasIndex("InterventionBrowseBranchListId");

                    b.HasIndex("InterventionBrowseLeafListId");

                    b.HasIndex("InterventionMeshListId");

                    b.ToTable("InterventionBrowseModule");
                });

            modelBuilder.Entity("Model.InterventionList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("InterventionList");
                });

            modelBuilder.Entity("Model.InterventionMesh", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InterventionMeshId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InterventionMeshListId")
                        .HasColumnType("int");

                    b.Property<string>("InterventionMeshTerm")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InterventionMeshListId");

                    b.ToTable("InterventionMesh");
                });

            modelBuilder.Entity("Model.InterventionMeshList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("InterventionMeshList");
                });

            modelBuilder.Entity("Model.KeywordList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Keyword")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("KeywordList");
                });

            modelBuilder.Entity("Model.LargeDoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LargeDocDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LargeDocFilename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LargeDocHasICF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LargeDocHasProtocol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LargeDocHasSAP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LargeDocLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LargeDocListId")
                        .HasColumnType("int");

                    b.Property<string>("LargeDocTypeAbbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LargeDocUploadDate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LargeDocListId");

                    b.ToTable("LargeDoc");
                });

            modelBuilder.Entity("Model.LargeDocList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("LargeDocList");
                });

            modelBuilder.Entity("Model.LargeDocumentModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LargeDocListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LargeDocListId");

                    b.ToTable("LargeDocumentModule");
                });

            modelBuilder.Entity("Model.LastUpdatePostDateStruct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LastUpdatePostDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatePostDateType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LastUpdatePostDateStruct");
                });

            modelBuilder.Entity("Model.LeadSponsor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LeadSponsorClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeadSponsorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LeadSponsor");
                });

            modelBuilder.Entity("Model.LimitationsAndCaveats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("dedLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LimitationsAndCaveats");
                });

            modelBuilder.Entity("Model.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LocationCity")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("LocationContactListId")
                        .HasColumnType("int");

                    b.Property<string>("LocationCountry")
                        .HasColumnType("nvarchar(70)")
                        .HasMaxLength(70);

                    b.Property<string>("LocationFacility")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationListId")
                        .HasColumnType("int");

                    b.Property<string>("LocationState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationZip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationContactListId");

                    b.HasIndex("LocationListId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Model.LocationContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LocationContactEMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationContactListId")
                        .HasColumnType("int");

                    b.Property<string>("LocationContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationContactPhoneExt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationContactRole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationContactListId");

                    b.ToTable("LocationContact");
                });

            modelBuilder.Entity("Model.LocationContactList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("LocationContactList");
                });

            modelBuilder.Entity("Model.LocationList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("LocationList");
                });

            modelBuilder.Entity("Model.MiscInfoModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("RemovedCountryListId")
                        .HasColumnType("int");

                    b.Property<string>("VersionHolder")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RemovedCountryListId");

                    b.ToTable("MiscInfoModule");
                });

            modelBuilder.Entity("Model.MoreInfoModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CertainAgreementId")
                        .HasColumnType("int");

                    b.Property<int?>("LimitationsAndCaveatsId")
                        .HasColumnType("int");

                    b.Property<int?>("PointOfContactId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CertainAgreementId");

                    b.HasIndex("LimitationsAndCaveatsId");

                    b.HasIndex("PointOfContactId");

                    b.ToTable("MoreInfoModule");
                });

            modelBuilder.Entity("Model.NCTIdAliasList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NCTIdAlias")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NCTIdAliasList");
                });

            modelBuilder.Entity("Model.OrgStudyIdInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OrgStudyId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrgStudyIdInfo");
                });

            modelBuilder.Entity("Model.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OrgClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrgFullName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("Model.OtherEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OtherEventAssessmentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OtherEventListId")
                        .HasColumnType("int");

                    b.Property<string>("OtherEventNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherEventOrganSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherEventSourceVocabulary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OtherEventStatsListId")
                        .HasColumnType("int");

                    b.Property<string>("OtherEventTerm")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OtherEventListId");

                    b.HasIndex("OtherEventStatsListId");

                    b.ToTable("OtherEvent");
                });

            modelBuilder.Entity("Model.OtherEventList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("OtherEventList");
                });

            modelBuilder.Entity("Model.OtherEventStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OtherEventStatsGroupId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OtherEventStatsListId")
                        .HasColumnType("int");

                    b.Property<string>("OtherEventStatsNumAffected")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherEventStatsNumAtRisk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherEventStatsNumEvents")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OtherEventStatsListId");

                    b.ToTable("OtherEventStats");
                });

            modelBuilder.Entity("Model.OtherEventStatsList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("OtherEventStatsList");
                });

            modelBuilder.Entity("Model.OtherOutcome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OtherOutcomeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OtherOutcomeListId")
                        .HasColumnType("int");

                    b.Property<string>("OtherOutcomeMeasure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherOutcomeTimeFrame")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OtherOutcomeListId");

                    b.ToTable("OtherOutcome");
                });

            modelBuilder.Entity("Model.OtherOutcomeList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("OtherOutcomeList");
                });

            modelBuilder.Entity("Model.OutcomeAnalysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OutcomeAnalysisCILowerLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeAnalysisCILowerLimitComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeAnalysisCINumSides")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeAnalysisCIPctValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeAnalysisCIUpperLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeAnalysisCIUpperLimitComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeAnalysisDispersionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeAnalysisDispersionValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeAnalysisEstimateComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeAnalysisGroupDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OutcomeAnalysisGroupIdListId")
                        .HasColumnType("int");

                    b.Property<int?>("OutcomeAnalysisListId")
                        .HasColumnType("int");

                    b.Property<string>("OutcomeAnalysisNonInferiorityComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeAnalysisNonInferiorityType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeAnalysisOtherAnalysisDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeAnalysisPValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeAnalysisPValueComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeAnalysisParamType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeAnalysisParamValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeAnalysisStatisticalComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeAnalysisStatisticalMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeAnalysisTestedNonInferiority")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OutcomeAnalysisGroupIdListId");

                    b.HasIndex("OutcomeAnalysisListId");

                    b.ToTable("OutcomeAnalysis");
                });

            modelBuilder.Entity("Model.OutcomeAnalysisGroupIdList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OutcomeAnalysisGroupId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OutcomeAnalysisGroupIdList");
                });

            modelBuilder.Entity("Model.OutcomeAnalysisList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("OutcomeAnalysisList");
                });

            modelBuilder.Entity("Model.OutcomeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OutcomeCategoryListId")
                        .HasColumnType("int");

                    b.Property<string>("OutcomeCategoryTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OutcomeMeasurementListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OutcomeCategoryListId");

                    b.HasIndex("OutcomeMeasurementListId");

                    b.ToTable("OutcomeCategory");
                });

            modelBuilder.Entity("Model.OutcomeCategoryList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("OutcomeCategoryList");
                });

            modelBuilder.Entity("Model.OutcomeClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OutcomeCategoryListId")
                        .HasColumnType("int");

                    b.Property<int?>("OutcomeClassDenomListId")
                        .HasColumnType("int");

                    b.Property<int?>("OutcomeClassListId")
                        .HasColumnType("int");

                    b.Property<string>("OutcomeClassTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OutcomeCategoryListId");

                    b.HasIndex("OutcomeClassDenomListId");

                    b.HasIndex("OutcomeClassListId");

                    b.ToTable("OutcomeClass");
                });

            modelBuilder.Entity("Model.OutcomeClassDenom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OutcomeClassDenomCountListId")
                        .HasColumnType("int");

                    b.Property<int?>("OutcomeClassDenomListId")
                        .HasColumnType("int");

                    b.Property<string>("OutcomeClassDenomUnits")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OutcomeClassDenomCountListId");

                    b.HasIndex("OutcomeClassDenomListId");

                    b.ToTable("OutcomeClassDenom");
                });

            modelBuilder.Entity("Model.OutcomeClassDenomCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OutcomeClassDenomCountGroupId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OutcomeClassDenomCountListId")
                        .HasColumnType("int");

                    b.Property<string>("OutcomeClassDenomCountValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OutcomeClassDenomCountListId");

                    b.ToTable("OutcomeClassDenomCount");
                });

            modelBuilder.Entity("Model.OutcomeClassDenomCountList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("OutcomeClassDenomCountList");
                });

            modelBuilder.Entity("Model.OutcomeClassDenomList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("OutcomeClassDenomList");
                });

            modelBuilder.Entity("Model.OutcomeClassList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("OutcomeClassList");
                });

            modelBuilder.Entity("Model.OutcomeDenom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OutcomeDenomCountListId")
                        .HasColumnType("int");

                    b.Property<int?>("OutcomeDenomListId")
                        .HasColumnType("int");

                    b.Property<string>("OutcomeDenomUnits")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OutcomeDenomCountListId");

                    b.HasIndex("OutcomeDenomListId");

                    b.ToTable("OutcomeDenom");
                });

            modelBuilder.Entity("Model.OutcomeDenomCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OutcomeDenomCountGroupId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OutcomeDenomCountListId")
                        .HasColumnType("int");

                    b.Property<string>("OutcomeDenomCountValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OutcomeDenomCountListId");

                    b.ToTable("OutcomeDenomCount");
                });

            modelBuilder.Entity("Model.OutcomeDenomCountList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("OutcomeDenomCountList");
                });

            modelBuilder.Entity("Model.OutcomeDenomList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("OutcomeDenomList");
                });

            modelBuilder.Entity("Model.OutcomeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OutcomeGroupDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeGroupId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OutcomeGroupListId")
                        .HasColumnType("int");

                    b.Property<string>("OutcomeGroupTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OutcomeGroupListId");

                    b.ToTable("OutcomeGroup");
                });

            modelBuilder.Entity("Model.OutcomeGroupList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("OutcomeGroupList");
                });

            modelBuilder.Entity("Model.OutcomeMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OutcomeAnalysisListId")
                        .HasColumnType("int");

                    b.Property<int?>("OutcomeClassListId")
                        .HasColumnType("int");

                    b.Property<int?>("OutcomeDenomListId")
                        .HasColumnType("int");

                    b.Property<int?>("OutcomeGroupListId")
                        .HasColumnType("int");

                    b.Property<string>("OutcomeMeasureAnticipatedPostingDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeMeasureCalculatePct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeMeasureDenomUnitsSelected")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeMeasureDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeMeasureDispersionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OutcomeMeasureListId")
                        .HasColumnType("int");

                    b.Property<string>("OutcomeMeasureParamType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeMeasurePopulationDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeMeasureReportingStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeMeasureTimeFrame")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeMeasureTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeMeasureType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeMeasureTypeUnitsAnalyzed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeMeasureUnitOfMeasure")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OutcomeAnalysisListId");

                    b.HasIndex("OutcomeClassListId");

                    b.HasIndex("OutcomeDenomListId");

                    b.HasIndex("OutcomeGroupListId");

                    b.HasIndex("OutcomeMeasureListId");

                    b.ToTable("OutcomeMeasure");
                });

            modelBuilder.Entity("Model.OutcomeMeasureList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("OutcomeMeasureList");
                });

            modelBuilder.Entity("Model.OutcomeMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OutcomeMeasurementComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeMeasurementGroupId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OutcomeMeasurementListId")
                        .HasColumnType("int");

                    b.Property<string>("OutcomeMeasurementLowerLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeMeasurementSpread")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeMeasurementUpperLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeMeasurementValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OutcomeMeasurementListId");

                    b.ToTable("OutcomeMeasurement");
                });

            modelBuilder.Entity("Model.OutcomeMeasurementList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("OutcomeMeasurementList");
                });

            modelBuilder.Entity("Model.OutcomeMeasuresModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OutcomeMeasureListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OutcomeMeasureListId");

                    b.ToTable("OutcomeMeasuresModule");
                });

            modelBuilder.Entity("Model.OutcomesModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OtherOutcomeListId")
                        .HasColumnType("int");

                    b.Property<int?>("PrimaryOutcomeListId")
                        .HasColumnType("int");

                    b.Property<int?>("SecondaryOutcomeListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OtherOutcomeListId");

                    b.HasIndex("PrimaryOutcomeListId");

                    b.HasIndex("SecondaryOutcomeListId");

                    b.ToTable("OutcomesModule");
                });

            modelBuilder.Entity("Model.OverallOfficial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OverallOfficialAffiliation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OverallOfficialListId")
                        .HasColumnType("int");

                    b.Property<string>("OverallOfficialName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OverallOfficialRole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OverallOfficialListId");

                    b.ToTable("OverallOfficial");
                });

            modelBuilder.Entity("Model.OverallOfficialList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("OverallOfficialList");
                });

            modelBuilder.Entity("Model.OversightModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IsFDARegulatedDevice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsFDARegulatedDrug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsPPSD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsUSExport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsUnapprovedDevice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OversightHasDMC")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OversightModule");
                });

            modelBuilder.Entity("Model.ParticipantFlowModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FlowGroupListId")
                        .HasColumnType("int");

                    b.Property<int?>("FlowPeriodListId")
                        .HasColumnType("int");

                    b.Property<string>("FlowPreAssignmentDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlowRecruitmentDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlowTypeUnitsAnalyzed")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FlowGroupListId");

                    b.HasIndex("FlowPeriodListId");

                    b.ToTable("ParticipantFlowModule");
                });

            modelBuilder.Entity("Model.PhaseList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Phase")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PhaseList");
                });

            modelBuilder.Entity("Model.PointOfContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PointOfContactEMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PointOfContactOrganization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PointOfContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PointOfContactPhoneExt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PointOfContactTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PointOfContact");
                });

            modelBuilder.Entity("Model.PrimaryCompletionDateStruct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PrimaryCompletionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryCompletionDateType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PrimaryCompletionDateStruct");
                });

            modelBuilder.Entity("Model.PrimaryOutcome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PrimaryOutcomeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrimaryOutcomeListId")
                        .HasColumnType("int");

                    b.Property<string>("PrimaryOutcomeMeasure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryOutcomeTimeFrame")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryOutcomeListId");

                    b.ToTable("PrimaryOutcome");
                });

            modelBuilder.Entity("Model.PrimaryOutcomeList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("PrimaryOutcomeList");
                });

            modelBuilder.Entity("Model.ProtocolSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArmsInterventionsModuleId")
                        .HasColumnType("int");

                    b.Property<int?>("ConditionsModuleId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactsLocationsModuleId")
                        .HasColumnType("int");

                    b.Property<int?>("DescriptionModuleId")
                        .HasColumnType("int");

                    b.Property<int?>("DesignModuleId")
                        .HasColumnType("int");

                    b.Property<int?>("EligibilityModuleId")
                        .HasColumnType("int");

                    b.Property<int?>("IPDSharingStatementModuleId")
                        .HasColumnType("int");

                    b.Property<int?>("IdentificationModuleId")
                        .HasColumnType("int");

                    b.Property<int?>("OutcomesModuleId")
                        .HasColumnType("int");

                    b.Property<int?>("OversightModuleId")
                        .HasColumnType("int");

                    b.Property<int?>("ReferencesModuleId")
                        .HasColumnType("int");

                    b.Property<int?>("SponsorCollaboratorsModuleId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusModuleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArmsInterventionsModuleId");

                    b.HasIndex("ConditionsModuleId");

                    b.HasIndex("ContactsLocationsModuleId");

                    b.HasIndex("DescriptionModuleId");

                    b.HasIndex("DesignModuleId");

                    b.HasIndex("EligibilityModuleId");

                    b.HasIndex("IPDSharingStatementModuleId");

                    b.HasIndex("IdentificationModuleId");

                    b.HasIndex("OutcomesModuleId");

                    b.HasIndex("OversightModuleId");

                    b.HasIndex("ReferencesModuleId");

                    b.HasIndex("SponsorCollaboratorsModuleId");

                    b.HasIndex("StatusModuleId");

                    b.ToTable("ProtocolSection");
                });

            modelBuilder.Entity("Model.Reference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ReferenceCitation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReferenceListId")
                        .HasColumnType("int");

                    b.Property<string>("ReferencePMID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RetractionListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceListId");

                    b.HasIndex("RetractionListId");

                    b.ToTable("Reference");
                });

            modelBuilder.Entity("Model.ReferenceList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("ReferenceList");
                });

            modelBuilder.Entity("Model.ReferencesModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AvailIPDListId")
                        .HasColumnType("int");

                    b.Property<int?>("ReferenceListId")
                        .HasColumnType("int");

                    b.Property<int?>("SeeAlsoLinkListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AvailIPDListId");

                    b.HasIndex("ReferenceListId");

                    b.HasIndex("SeeAlsoLinkListId");

                    b.ToTable("ReferencesModule");
                });

            modelBuilder.Entity("Model.RemovedCountryList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RemovedCountry")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RemovedCountryList");
                });

            modelBuilder.Entity("Model.ResponsibleParty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ResponsiblePartyInvestigatorAffiliation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsiblePartyInvestigatorFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsiblePartyInvestigatorTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsiblePartyOldNameTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsiblePartyOldOrganization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsiblePartyType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResponsibleParty");
                });

            modelBuilder.Entity("Model.ResultsFirstPostDateStruct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ResultsFirstPostDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultsFirstPostDateType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResultsFirstPostDateStruct");
                });

            modelBuilder.Entity("Model.ResultsSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdverseEventsModuleId")
                        .HasColumnType("int");

                    b.Property<int?>("BaselineCharacteristicsModuleId")
                        .HasColumnType("int");

                    b.Property<int?>("MoreInfoModuleId")
                        .HasColumnType("int");

                    b.Property<int?>("OutcomeMeasuresModuleId")
                        .HasColumnType("int");

                    b.Property<int?>("ParticipantFlowModuleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdverseEventsModuleId");

                    b.HasIndex("BaselineCharacteristicsModuleId");

                    b.HasIndex("MoreInfoModuleId");

                    b.HasIndex("OutcomeMeasuresModuleId");

                    b.HasIndex("ParticipantFlowModuleId");

                    b.ToTable("ResultsSection");
                });

            modelBuilder.Entity("Model.Retraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("RetractionListId")
                        .HasColumnType("int");

                    b.Property<string>("RetractionPMID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RetractionSource")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RetractionListId");

                    b.ToTable("Retraction");
                });

            modelBuilder.Entity("Model.RetractionList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("RetractionList");
                });

            modelBuilder.Entity("Model.Root", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FullStudyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FullStudyId");

                    b.ToTable("Studies");
                });

            modelBuilder.Entity("Model.SecondaryIdInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SecondaryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SecondaryIdInfoListId")
                        .HasColumnType("int");

                    b.Property<string>("SecondaryIdLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryIdType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SecondaryIdInfoListId");

                    b.ToTable("SecondaryIdInfo");
                });

            modelBuilder.Entity("Model.SecondaryIdInfoList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("SecondaryIdInfoList");
                });

            modelBuilder.Entity("Model.SecondaryOutcome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SecondaryOutcomeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SecondaryOutcomeListId")
                        .HasColumnType("int");

                    b.Property<string>("SecondaryOutcomeMeasure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryOutcomeTimeFrame")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SecondaryOutcomeListId");

                    b.ToTable("SecondaryOutcome");
                });

            modelBuilder.Entity("Model.SecondaryOutcomeList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("SecondaryOutcomeList");
                });

            modelBuilder.Entity("Model.SeeAlsoLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SeeAlsoLinkLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SeeAlsoLinkListId")
                        .HasColumnType("int");

                    b.Property<string>("SeeAlsoLinkURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SeeAlsoLinkListId");

                    b.ToTable("SeeAlsoLink");
                });

            modelBuilder.Entity("Model.SeeAlsoLinkList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("SeeAlsoLinkList");
                });

            modelBuilder.Entity("Model.SeriousEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SeriousEventAssessmentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SeriousEventListId")
                        .HasColumnType("int");

                    b.Property<string>("SeriousEventNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeriousEventOrganSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeriousEventSourceVocabulary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SeriousEventStatsListId")
                        .HasColumnType("int");

                    b.Property<string>("SeriousEventTerm")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SeriousEventListId");

                    b.HasIndex("SeriousEventStatsListId");

                    b.ToTable("SeriousEvent");
                });

            modelBuilder.Entity("Model.SeriousEventList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("SeriousEventList");
                });

            modelBuilder.Entity("Model.SeriousEventStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SeriousEventStatsGroupId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SeriousEventStatsListId")
                        .HasColumnType("int");

                    b.Property<string>("SeriousEventStatsNumAffected")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeriousEventStatsNumAtRisk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeriousEventStatsNumEvents")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SeriousEventStatsListId");

                    b.ToTable("SeriousEventStats");
                });

            modelBuilder.Entity("Model.SeriousEventStatsList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("SeriousEventStatsList");
                });

            modelBuilder.Entity("Model.SponsorCollaboratorsModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CollaboratorListId")
                        .HasColumnType("int");

                    b.Property<int?>("LeadSponsorId")
                        .HasColumnType("int");

                    b.Property<int?>("ResponsiblePartyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CollaboratorListId");

                    b.HasIndex("LeadSponsorId");

                    b.HasIndex("ResponsiblePartyId");

                    b.ToTable("SponsorCollaboratorsModule");
                });

            modelBuilder.Entity("Model.StartDateStruct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StartDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartDateType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StartDateStruct");
                });

            modelBuilder.Entity("Model.StatisticsSearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("StatisticsSearches");
                });

            modelBuilder.Entity("Model.StatusModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompletionDateStructId")
                        .HasColumnType("int");

                    b.Property<string>("DelayedPosting")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DispFirstPostDateStructId")
                        .HasColumnType("int");

                    b.Property<string>("DispFirstSubmitDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DispFirstSubmitQCDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExpandedAccessInfoId")
                        .HasColumnType("int");

                    b.Property<string>("LastKnownStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LastUpdatePostDateStructId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdateSubmitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OverallStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrimaryCompletionDateStructId")
                        .HasColumnType("int");

                    b.Property<int?>("ResultsFirstPostDateStructId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResultsFirstSubmitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResultsFirstSubmitQCDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StartDateStructId")
                        .HasColumnType("int");

                    b.Property<string>("StatusVerifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudyFirstPostDateStructId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StudyFirstSubmitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudyFirstSubmitQCDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhyStopped")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompletionDateStructId");

                    b.HasIndex("DispFirstPostDateStructId");

                    b.HasIndex("ExpandedAccessInfoId");

                    b.HasIndex("LastUpdatePostDateStructId");

                    b.HasIndex("PrimaryCompletionDateStructId");

                    b.HasIndex("ResultsFirstPostDateStructId");

                    b.HasIndex("StartDateStructId");

                    b.HasIndex("StudyFirstPostDateStructId");

                    b.ToTable("StatusModule");
                });

            modelBuilder.Entity("Model.StdAgeList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StdAge")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StdAgeList");
                });

            modelBuilder.Entity("Model.Study", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnnotationSectionId")
                        .HasColumnType("int");

                    b.Property<int?>("DerivedSectionId")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentSectionId")
                        .HasColumnType("int");

                    b.Property<int?>("ProtocolSectionId")
                        .HasColumnType("int");

                    b.Property<int?>("ResultsSectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnnotationSectionId");

                    b.HasIndex("DerivedSectionId");

                    b.HasIndex("DocumentSectionId");

                    b.HasIndex("ProtocolSectionId");

                    b.HasIndex("ResultsSectionId");

                    b.ToTable("Study");
                });

            modelBuilder.Entity("Model.StudyFirstPostDateStruct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StudyFirstPostDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudyFirstPostDateType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudyFirstPostDateStruct");
                });

            modelBuilder.Entity("Model.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Model.TagList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NCTId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Section")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TagLists");
                });

            modelBuilder.Entity("Model.UnpostedAnnotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("UnpostedEventListId")
                        .HasColumnType("int");

                    b.Property<string>("UnpostedResponsibleParty")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UnpostedEventListId");

                    b.ToTable("UnpostedAnnotation");
                });

            modelBuilder.Entity("Model.UnpostedEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UnpostedEventDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UnpostedEventListId")
                        .HasColumnType("int");

                    b.Property<string>("UnpostedEventType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UnpostedEventListId");

                    b.ToTable("UnpostedEvent");
                });

            modelBuilder.Entity("Model.UnpostedEventList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("UnpostedEventList");
                });

            modelBuilder.Entity("Model.AdverseEventsModule", b =>
                {
                    b.HasOne("Model.EventGroupList", "EventGroupList")
                        .WithMany()
                        .HasForeignKey("EventGroupListId");

                    b.HasOne("Model.OtherEventList", "OtherEventList")
                        .WithMany()
                        .HasForeignKey("OtherEventListId");

                    b.HasOne("Model.SeriousEventList", "SeriousEventList")
                        .WithMany()
                        .HasForeignKey("SeriousEventListId");
                });

            modelBuilder.Entity("Model.AnnotationModule", b =>
                {
                    b.HasOne("Model.UnpostedAnnotation", "UnpostedAnnotation")
                        .WithMany()
                        .HasForeignKey("UnpostedAnnotationId");
                });

            modelBuilder.Entity("Model.AnnotationSection", b =>
                {
                    b.HasOne("Model.AnnotationModule", "AnnotationModule")
                        .WithMany()
                        .HasForeignKey("AnnotationModuleId");
                });

            modelBuilder.Entity("Model.ArmGroup", b =>
                {
                    b.HasOne("Model.ArmGroupInterventionList", "ArmGroupInterventionList")
                        .WithMany()
                        .HasForeignKey("ArmGroupInterventionListId");

                    b.HasOne("Model.ArmGroupList", null)
                        .WithMany("ArmGroup")
                        .HasForeignKey("ArmGroupListId");
                });

            modelBuilder.Entity("Model.ArmsInterventionsModule", b =>
                {
                    b.HasOne("Model.ArmGroupList", "ArmGroupList")
                        .WithMany()
                        .HasForeignKey("ArmGroupListId");

                    b.HasOne("Model.InterventionList", "InterventionList")
                        .WithMany()
                        .HasForeignKey("InterventionListId");
                });

            modelBuilder.Entity("Model.AvailIPD", b =>
                {
                    b.HasOne("Model.AvailIPDList", null)
                        .WithMany("AvailIPD")
                        .HasForeignKey("AvailIPDListId");
                });

            modelBuilder.Entity("Model.BaselineCategory", b =>
                {
                    b.HasOne("Model.BaselineCategoryList", null)
                        .WithMany("BaselineCategory")
                        .HasForeignKey("BaselineCategoryListId");

                    b.HasOne("Model.BaselineMeasurementList", "BaselineMeasurementList")
                        .WithMany()
                        .HasForeignKey("BaselineMeasurementListId");
                });

            modelBuilder.Entity("Model.BaselineCharacteristicsModule", b =>
                {
                    b.HasOne("Model.BaselineDenomList", "BaselineDenomList")
                        .WithMany()
                        .HasForeignKey("BaselineDenomListId");

                    b.HasOne("Model.BaselineGroupList", "BaselineGroupList")
                        .WithMany()
                        .HasForeignKey("BaselineGroupListId");

                    b.HasOne("Model.BaselineMeasureList", "BaselineMeasureList")
                        .WithMany()
                        .HasForeignKey("BaselineMeasureListId");
                });

            modelBuilder.Entity("Model.BaselineClass", b =>
                {
                    b.HasOne("Model.BaselineCategoryList", "BaselineCategoryList")
                        .WithMany()
                        .HasForeignKey("BaselineCategoryListId");

                    b.HasOne("Model.BaselineClassDenomList", "BaselineClassDenomList")
                        .WithMany()
                        .HasForeignKey("BaselineClassDenomListId");

                    b.HasOne("Model.BaselineClassList", null)
                        .WithMany("BaselineClass")
                        .HasForeignKey("BaselineClassListId");
                });

            modelBuilder.Entity("Model.BaselineClassDenom", b =>
                {
                    b.HasOne("Model.BaselineClassDenomCountList", "BaselineClassDenomCountList")
                        .WithMany()
                        .HasForeignKey("BaselineClassDenomCountListId");

                    b.HasOne("Model.BaselineClassDenomList", null)
                        .WithMany("BaselineClassDenom")
                        .HasForeignKey("BaselineClassDenomListId");
                });

            modelBuilder.Entity("Model.BaselineClassDenomCount", b =>
                {
                    b.HasOne("Model.BaselineClassDenomCountList", null)
                        .WithMany("BaselineClassDenomCount")
                        .HasForeignKey("BaselineClassDenomCountListId");
                });

            modelBuilder.Entity("Model.BaselineDenom", b =>
                {
                    b.HasOne("Model.BaselineDenomCountList", "BaselineDenomCountList")
                        .WithMany()
                        .HasForeignKey("BaselineDenomCountListId");

                    b.HasOne("Model.BaselineDenomList", null)
                        .WithMany("BaselineDenom")
                        .HasForeignKey("BaselineDenomListId");
                });

            modelBuilder.Entity("Model.BaselineDenomCount", b =>
                {
                    b.HasOne("Model.BaselineDenomCountList", null)
                        .WithMany("BaselineDenomCount")
                        .HasForeignKey("BaselineDenomCountListId");
                });

            modelBuilder.Entity("Model.BaselineGroup", b =>
                {
                    b.HasOne("Model.BaselineGroupList", null)
                        .WithMany("BaselineGroup")
                        .HasForeignKey("BaselineGroupListId");
                });

            modelBuilder.Entity("Model.BaselineMeasure", b =>
                {
                    b.HasOne("Model.BaselineClassList", "BaselineClassList")
                        .WithMany()
                        .HasForeignKey("BaselineClassListId");

                    b.HasOne("Model.BaselineMeasureDenomList", "BaselineMeasureDenomList")
                        .WithMany()
                        .HasForeignKey("BaselineMeasureDenomListId");

                    b.HasOne("Model.BaselineMeasureList", null)
                        .WithMany("BaselineMeasure")
                        .HasForeignKey("BaselineMeasureListId");
                });

            modelBuilder.Entity("Model.BaselineMeasureDenom", b =>
                {
                    b.HasOne("Model.BaselineMeasureDenomCountList", "BaselineMeasureDenomCountList")
                        .WithMany()
                        .HasForeignKey("BaselineMeasureDenomCountListId");

                    b.HasOne("Model.BaselineMeasureDenomList", null)
                        .WithMany("BaselineMeasureDenom")
                        .HasForeignKey("BaselineMeasureDenomListId");
                });

            modelBuilder.Entity("Model.BaselineMeasureDenomCount", b =>
                {
                    b.HasOne("Model.BaselineMeasureDenomCountList", null)
                        .WithMany("BaselineMeasureDenomCount")
                        .HasForeignKey("BaselineMeasureDenomCountListId");
                });

            modelBuilder.Entity("Model.BaselineMeasurement", b =>
                {
                    b.HasOne("Model.BaselineMeasurementList", null)
                        .WithMany("BaselineMeasurement")
                        .HasForeignKey("BaselineMeasurementListId");
                });

            modelBuilder.Entity("Model.CentralContact", b =>
                {
                    b.HasOne("Model.CentralContactList", null)
                        .WithMany("CentralContact")
                        .HasForeignKey("CentralContactListId");
                });

            modelBuilder.Entity("Model.Collaborator", b =>
                {
                    b.HasOne("Model.CollaboratorList", null)
                        .WithMany("Collaborator")
                        .HasForeignKey("CollaboratorListId");
                });

            modelBuilder.Entity("Model.ConditionAncestor", b =>
                {
                    b.HasOne("Model.ConditionAncestorList", null)
                        .WithMany("ConditionAncestor")
                        .HasForeignKey("ConditionAncestorListId");
                });

            modelBuilder.Entity("Model.ConditionBrowseBranch", b =>
                {
                    b.HasOne("Model.ConditionBrowseBranchList", null)
                        .WithMany("ConditionBrowseBranch")
                        .HasForeignKey("ConditionBrowseBranchListId");
                });

            modelBuilder.Entity("Model.ConditionBrowseLeaf", b =>
                {
                    b.HasOne("Model.ConditionBrowseLeafList", null)
                        .WithMany("ConditionBrowseLeaf")
                        .HasForeignKey("ConditionBrowseLeafListId");
                });

            modelBuilder.Entity("Model.ConditionBrowseModule", b =>
                {
                    b.HasOne("Model.ConditionAncestorList", "ConditionAncestorList")
                        .WithMany()
                        .HasForeignKey("ConditionAncestorListId");

                    b.HasOne("Model.ConditionBrowseBranchList", "ConditionBrowseBranchList")
                        .WithMany()
                        .HasForeignKey("ConditionBrowseBranchListId");

                    b.HasOne("Model.ConditionBrowseLeafList", "ConditionBrowseLeafList")
                        .WithMany()
                        .HasForeignKey("ConditionBrowseLeafListId");

                    b.HasOne("Model.ConditionMeshList", "ConditionMeshList")
                        .WithMany()
                        .HasForeignKey("ConditionMeshListId");
                });

            modelBuilder.Entity("Model.ConditionMesh", b =>
                {
                    b.HasOne("Model.ConditionMeshList", null)
                        .WithMany("ConditionMesh")
                        .HasForeignKey("ConditionMeshListId");
                });

            modelBuilder.Entity("Model.ConditionsModule", b =>
                {
                    b.HasOne("Model.ConditionList", "ConditionList")
                        .WithMany()
                        .HasForeignKey("ConditionListId");

                    b.HasOne("Model.KeywordList", "KeywordList")
                        .WithMany()
                        .HasForeignKey("KeywordListId");
                });

            modelBuilder.Entity("Model.ContactsLocationsModule", b =>
                {
                    b.HasOne("Model.CentralContactList", "CentralContactList")
                        .WithMany()
                        .HasForeignKey("CentralContactListId");

                    b.HasOne("Model.LocationList", "LocationList")
                        .WithMany()
                        .HasForeignKey("LocationListId");

                    b.HasOne("Model.OverallOfficialList", "OverallOfficialList")
                        .WithMany()
                        .HasForeignKey("OverallOfficialListId");
                });

            modelBuilder.Entity("Model.DerivedSection", b =>
                {
                    b.HasOne("Model.ConditionBrowseModule", "ConditionBrowseModule")
                        .WithMany()
                        .HasForeignKey("ConditionBrowseModuleId");

                    b.HasOne("Model.InterventionBrowseModule", "InterventionBrowseModule")
                        .WithMany()
                        .HasForeignKey("InterventionBrowseModuleId");

                    b.HasOne("Model.MiscInfoModule", "MiscInfoModule")
                        .WithMany()
                        .HasForeignKey("MiscInfoModuleId");
                });

            modelBuilder.Entity("Model.DesignInfo", b =>
                {
                    b.HasOne("Model.DesignMaskingInfo", "DesignMaskingInfo")
                        .WithMany()
                        .HasForeignKey("DesignMaskingInfoId");

                    b.HasOne("Model.DesignObservationalModelList", "DesignObservationalModelList")
                        .WithMany()
                        .HasForeignKey("DesignObservationalModelListId");

                    b.HasOne("Model.DesignTimePerspectiveList", "DesignTimePerspectiveList")
                        .WithMany()
                        .HasForeignKey("DesignTimePerspectiveListId");
                });

            modelBuilder.Entity("Model.DesignMaskingInfo", b =>
                {
                    b.HasOne("Model.DesignWhoMaskedList", "DesignWhoMaskedList")
                        .WithMany()
                        .HasForeignKey("DesignWhoMaskedListId");
                });

            modelBuilder.Entity("Model.DesignModule", b =>
                {
                    b.HasOne("Model.BioSpec", "BioSpec")
                        .WithMany()
                        .HasForeignKey("BioSpecId");

                    b.HasOne("Model.DesignInfo", "DesignInfo")
                        .WithMany()
                        .HasForeignKey("DesignInfoId");

                    b.HasOne("Model.EnrollmentInfo", "EnrollmentInfo")
                        .WithMany()
                        .HasForeignKey("EnrollmentInfoId");

                    b.HasOne("Model.ExpandedAccessTypes", "ExpandedAccessTypes")
                        .WithMany()
                        .HasForeignKey("ExpandedAccessTypesId");

                    b.HasOne("Model.PhaseList", "PhaseList")
                        .WithMany()
                        .HasForeignKey("PhaseListId");
                });

            modelBuilder.Entity("Model.DocumentSection", b =>
                {
                    b.HasOne("Model.LargeDocumentModule", "LargeDocumentModule")
                        .WithMany()
                        .HasForeignKey("LargeDocumentModuleId");
                });

            modelBuilder.Entity("Model.EligibilityModule", b =>
                {
                    b.HasOne("Model.StdAgeList", "StdAgeList")
                        .WithMany()
                        .HasForeignKey("StdAgeListId");
                });

            modelBuilder.Entity("Model.EventGroup", b =>
                {
                    b.HasOne("Model.EventGroupList", null)
                        .WithMany("EventGroup")
                        .HasForeignKey("EventGroupListId");
                });

            modelBuilder.Entity("Model.FlowAchievement", b =>
                {
                    b.HasOne("Model.FlowAchievementList", null)
                        .WithMany("FlowAchievement")
                        .HasForeignKey("FlowAchievementListId");
                });

            modelBuilder.Entity("Model.FlowDropWithdraw", b =>
                {
                    b.HasOne("Model.FlowDropWithdrawList", null)
                        .WithMany("FlowDropWithdraw")
                        .HasForeignKey("FlowDropWithdrawListId");

                    b.HasOne("Model.FlowReasonList", "FlowReasonList")
                        .WithMany()
                        .HasForeignKey("FlowReasonListId");
                });

            modelBuilder.Entity("Model.FlowGroup", b =>
                {
                    b.HasOne("Model.FlowGroupList", null)
                        .WithMany("FlowGroup")
                        .HasForeignKey("FlowGroupListId");
                });

            modelBuilder.Entity("Model.FlowMilestone", b =>
                {
                    b.HasOne("Model.FlowAchievementList", "FlowAchievementList")
                        .WithMany()
                        .HasForeignKey("FlowAchievementListId");

                    b.HasOne("Model.FlowMilestoneList", null)
                        .WithMany("FlowMilestone")
                        .HasForeignKey("FlowMilestoneListId");
                });

            modelBuilder.Entity("Model.FlowPeriod", b =>
                {
                    b.HasOne("Model.FlowDropWithdrawList", "FlowDropWithdrawList")
                        .WithMany()
                        .HasForeignKey("FlowDropWithdrawListId");

                    b.HasOne("Model.FlowMilestoneList", "FlowMilestoneList")
                        .WithMany()
                        .HasForeignKey("FlowMilestoneListId");

                    b.HasOne("Model.FlowPeriodList", null)
                        .WithMany("FlowPeriod")
                        .HasForeignKey("FlowPeriodListId");
                });

            modelBuilder.Entity("Model.FlowReason", b =>
                {
                    b.HasOne("Model.FlowReasonList", null)
                        .WithMany("FlowReason")
                        .HasForeignKey("FlowReasonListId");
                });

            modelBuilder.Entity("Model.FullStudy", b =>
                {
                    b.HasOne("Model.Study", "Study")
                        .WithMany()
                        .HasForeignKey("StudyId");
                });

            modelBuilder.Entity("Model.IPDSharingStatementModule", b =>
                {
                    b.HasOne("Model.IPDSharingInfoTypeList", "IPDSharingInfoTypeList")
                        .WithMany()
                        .HasForeignKey("IPDSharingInfoTypeListId");
                });

            modelBuilder.Entity("Model.IdentificationModule", b =>
                {
                    b.HasOne("Model.NCTIdAliasList", "NCTIdAliasList")
                        .WithMany()
                        .HasForeignKey("NCTIdAliasListId");

                    b.HasOne("Model.OrgStudyIdInfo", "OrgStudyIdInfo")
                        .WithMany()
                        .HasForeignKey("OrgStudyIdInfoId");

                    b.HasOne("Model.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Model.SecondaryIdInfoList", "SecondaryIdInfoList")
                        .WithMany()
                        .HasForeignKey("SecondaryIdInfoListId");
                });

            modelBuilder.Entity("Model.Intervention", b =>
                {
                    b.HasOne("Model.InterventionList", null)
                        .WithMany("Intervention")
                        .HasForeignKey("InterventionListId");
                });

            modelBuilder.Entity("Model.InterventionAncestor", b =>
                {
                    b.HasOne("Model.InterventionAncestorList", null)
                        .WithMany("InterventionAncestor")
                        .HasForeignKey("InterventionAncestorListId");
                });

            modelBuilder.Entity("Model.InterventionBrowseBranch", b =>
                {
                    b.HasOne("Model.InterventionBrowseBranchList", null)
                        .WithMany("InterventionBrowseBranch")
                        .HasForeignKey("InterventionBrowseBranchListId");
                });

            modelBuilder.Entity("Model.InterventionBrowseLeaf", b =>
                {
                    b.HasOne("Model.InterventionBrowseLeafList", null)
                        .WithMany("InterventionBrowseLeaf")
                        .HasForeignKey("InterventionBrowseLeafListId");
                });

            modelBuilder.Entity("Model.InterventionBrowseModule", b =>
                {
                    b.HasOne("Model.InterventionAncestorList", "InterventionAncestorList")
                        .WithMany()
                        .HasForeignKey("InterventionAncestorListId");

                    b.HasOne("Model.InterventionBrowseBranchList", "InterventionBrowseBranchList")
                        .WithMany()
                        .HasForeignKey("InterventionBrowseBranchListId");

                    b.HasOne("Model.InterventionBrowseLeafList", "InterventionBrowseLeafList")
                        .WithMany()
                        .HasForeignKey("InterventionBrowseLeafListId");

                    b.HasOne("Model.InterventionMeshList", "InterventionMeshList")
                        .WithMany()
                        .HasForeignKey("InterventionMeshListId");
                });

            modelBuilder.Entity("Model.InterventionMesh", b =>
                {
                    b.HasOne("Model.InterventionMeshList", null)
                        .WithMany("InterventionMesh")
                        .HasForeignKey("InterventionMeshListId");
                });

            modelBuilder.Entity("Model.LargeDoc", b =>
                {
                    b.HasOne("Model.LargeDocList", null)
                        .WithMany("LargeDoc")
                        .HasForeignKey("LargeDocListId");
                });

            modelBuilder.Entity("Model.LargeDocumentModule", b =>
                {
                    b.HasOne("Model.LargeDocList", "LargeDocList")
                        .WithMany()
                        .HasForeignKey("LargeDocListId");
                });

            modelBuilder.Entity("Model.Location", b =>
                {
                    b.HasOne("Model.LocationContactList", "LocationContactList")
                        .WithMany()
                        .HasForeignKey("LocationContactListId");

                    b.HasOne("Model.LocationList", null)
                        .WithMany("Location")
                        .HasForeignKey("LocationListId");
                });

            modelBuilder.Entity("Model.LocationContact", b =>
                {
                    b.HasOne("Model.LocationContactList", null)
                        .WithMany("LocationContact")
                        .HasForeignKey("LocationContactListId");
                });

            modelBuilder.Entity("Model.MiscInfoModule", b =>
                {
                    b.HasOne("Model.RemovedCountryList", "RemovedCountryList")
                        .WithMany()
                        .HasForeignKey("RemovedCountryListId");
                });

            modelBuilder.Entity("Model.MoreInfoModule", b =>
                {
                    b.HasOne("Model.CertainAgreement", "CertainAgreement")
                        .WithMany()
                        .HasForeignKey("CertainAgreementId");

                    b.HasOne("Model.LimitationsAndCaveats", "LimitationsAndCaveats")
                        .WithMany()
                        .HasForeignKey("LimitationsAndCaveatsId");

                    b.HasOne("Model.PointOfContact", "PointOfContact")
                        .WithMany()
                        .HasForeignKey("PointOfContactId");
                });

            modelBuilder.Entity("Model.OtherEvent", b =>
                {
                    b.HasOne("Model.OtherEventList", null)
                        .WithMany("OtherEvent")
                        .HasForeignKey("OtherEventListId");

                    b.HasOne("Model.OtherEventStatsList", "OtherEventStatsList")
                        .WithMany()
                        .HasForeignKey("OtherEventStatsListId");
                });

            modelBuilder.Entity("Model.OtherEventStats", b =>
                {
                    b.HasOne("Model.OtherEventStatsList", null)
                        .WithMany("OtherEventStats")
                        .HasForeignKey("OtherEventStatsListId");
                });

            modelBuilder.Entity("Model.OtherOutcome", b =>
                {
                    b.HasOne("Model.OtherOutcomeList", null)
                        .WithMany("OtherOutcome")
                        .HasForeignKey("OtherOutcomeListId");
                });

            modelBuilder.Entity("Model.OutcomeAnalysis", b =>
                {
                    b.HasOne("Model.OutcomeAnalysisGroupIdList", "OutcomeAnalysisGroupIdList")
                        .WithMany()
                        .HasForeignKey("OutcomeAnalysisGroupIdListId");

                    b.HasOne("Model.OutcomeAnalysisList", null)
                        .WithMany("OutcomeAnalysis")
                        .HasForeignKey("OutcomeAnalysisListId");
                });

            modelBuilder.Entity("Model.OutcomeCategory", b =>
                {
                    b.HasOne("Model.OutcomeCategoryList", null)
                        .WithMany("OutcomeCategory")
                        .HasForeignKey("OutcomeCategoryListId");

                    b.HasOne("Model.OutcomeMeasurementList", "OutcomeMeasurementList")
                        .WithMany()
                        .HasForeignKey("OutcomeMeasurementListId");
                });

            modelBuilder.Entity("Model.OutcomeClass", b =>
                {
                    b.HasOne("Model.OutcomeCategoryList", "OutcomeCategoryList")
                        .WithMany()
                        .HasForeignKey("OutcomeCategoryListId");

                    b.HasOne("Model.OutcomeClassDenomList", "OutcomeClassDenomList")
                        .WithMany()
                        .HasForeignKey("OutcomeClassDenomListId");

                    b.HasOne("Model.OutcomeClassList", null)
                        .WithMany("OutcomeClass")
                        .HasForeignKey("OutcomeClassListId");
                });

            modelBuilder.Entity("Model.OutcomeClassDenom", b =>
                {
                    b.HasOne("Model.OutcomeClassDenomCountList", "OutcomeClassDenomCountList")
                        .WithMany()
                        .HasForeignKey("OutcomeClassDenomCountListId");

                    b.HasOne("Model.OutcomeClassDenomList", null)
                        .WithMany("OutcomeClassDenom")
                        .HasForeignKey("OutcomeClassDenomListId");
                });

            modelBuilder.Entity("Model.OutcomeClassDenomCount", b =>
                {
                    b.HasOne("Model.OutcomeClassDenomCountList", null)
                        .WithMany("OutcomeClassDenomCount")
                        .HasForeignKey("OutcomeClassDenomCountListId");
                });

            modelBuilder.Entity("Model.OutcomeDenom", b =>
                {
                    b.HasOne("Model.OutcomeDenomCountList", "OutcomeDenomCountList")
                        .WithMany()
                        .HasForeignKey("OutcomeDenomCountListId");

                    b.HasOne("Model.OutcomeDenomList", null)
                        .WithMany("OutcomeDenom")
                        .HasForeignKey("OutcomeDenomListId");
                });

            modelBuilder.Entity("Model.OutcomeDenomCount", b =>
                {
                    b.HasOne("Model.OutcomeDenomCountList", null)
                        .WithMany("OutcomeDenomCount")
                        .HasForeignKey("OutcomeDenomCountListId");
                });

            modelBuilder.Entity("Model.OutcomeGroup", b =>
                {
                    b.HasOne("Model.OutcomeGroupList", null)
                        .WithMany("OutcomeGroup")
                        .HasForeignKey("OutcomeGroupListId");
                });

            modelBuilder.Entity("Model.OutcomeMeasure", b =>
                {
                    b.HasOne("Model.OutcomeAnalysisList", "OutcomeAnalysisList")
                        .WithMany()
                        .HasForeignKey("OutcomeAnalysisListId");

                    b.HasOne("Model.OutcomeClassList", "OutcomeClassList")
                        .WithMany()
                        .HasForeignKey("OutcomeClassListId");

                    b.HasOne("Model.OutcomeDenomList", "OutcomeDenomList")
                        .WithMany()
                        .HasForeignKey("OutcomeDenomListId");

                    b.HasOne("Model.OutcomeGroupList", "OutcomeGroupList")
                        .WithMany()
                        .HasForeignKey("OutcomeGroupListId");

                    b.HasOne("Model.OutcomeMeasureList", null)
                        .WithMany("OutcomeMeasure")
                        .HasForeignKey("OutcomeMeasureListId");
                });

            modelBuilder.Entity("Model.OutcomeMeasurement", b =>
                {
                    b.HasOne("Model.OutcomeMeasurementList", null)
                        .WithMany("OutcomeMeasurement")
                        .HasForeignKey("OutcomeMeasurementListId");
                });

            modelBuilder.Entity("Model.OutcomeMeasuresModule", b =>
                {
                    b.HasOne("Model.OutcomeMeasureList", "OutcomeMeasureList")
                        .WithMany()
                        .HasForeignKey("OutcomeMeasureListId");
                });

            modelBuilder.Entity("Model.OutcomesModule", b =>
                {
                    b.HasOne("Model.OtherOutcomeList", "OtherOutcomeList")
                        .WithMany()
                        .HasForeignKey("OtherOutcomeListId");

                    b.HasOne("Model.PrimaryOutcomeList", "PrimaryOutcomeList")
                        .WithMany()
                        .HasForeignKey("PrimaryOutcomeListId");

                    b.HasOne("Model.SecondaryOutcomeList", "SecondaryOutcomeList")
                        .WithMany()
                        .HasForeignKey("SecondaryOutcomeListId");
                });

            modelBuilder.Entity("Model.OverallOfficial", b =>
                {
                    b.HasOne("Model.OverallOfficialList", null)
                        .WithMany("OverallOfficial")
                        .HasForeignKey("OverallOfficialListId");
                });

            modelBuilder.Entity("Model.ParticipantFlowModule", b =>
                {
                    b.HasOne("Model.FlowGroupList", "FlowGroupList")
                        .WithMany()
                        .HasForeignKey("FlowGroupListId");

                    b.HasOne("Model.FlowPeriodList", "FlowPeriodList")
                        .WithMany()
                        .HasForeignKey("FlowPeriodListId");
                });

            modelBuilder.Entity("Model.PrimaryOutcome", b =>
                {
                    b.HasOne("Model.PrimaryOutcomeList", null)
                        .WithMany("PrimaryOutcome")
                        .HasForeignKey("PrimaryOutcomeListId");
                });

            modelBuilder.Entity("Model.ProtocolSection", b =>
                {
                    b.HasOne("Model.ArmsInterventionsModule", "ArmsInterventionsModule")
                        .WithMany()
                        .HasForeignKey("ArmsInterventionsModuleId");

                    b.HasOne("Model.ConditionsModule", "ConditionsModule")
                        .WithMany()
                        .HasForeignKey("ConditionsModuleId");

                    b.HasOne("Model.ContactsLocationsModule", "ContactsLocationsModule")
                        .WithMany()
                        .HasForeignKey("ContactsLocationsModuleId");

                    b.HasOne("Model.DescriptionModule", "DescriptionModule")
                        .WithMany()
                        .HasForeignKey("DescriptionModuleId");

                    b.HasOne("Model.DesignModule", "DesignModule")
                        .WithMany()
                        .HasForeignKey("DesignModuleId");

                    b.HasOne("Model.EligibilityModule", "EligibilityModule")
                        .WithMany()
                        .HasForeignKey("EligibilityModuleId");

                    b.HasOne("Model.IPDSharingStatementModule", "IPDSharingStatementModule")
                        .WithMany()
                        .HasForeignKey("IPDSharingStatementModuleId");

                    b.HasOne("Model.IdentificationModule", "IdentificationModule")
                        .WithMany()
                        .HasForeignKey("IdentificationModuleId");

                    b.HasOne("Model.OutcomesModule", "OutcomesModule")
                        .WithMany()
                        .HasForeignKey("OutcomesModuleId");

                    b.HasOne("Model.OversightModule", "OversightModule")
                        .WithMany()
                        .HasForeignKey("OversightModuleId");

                    b.HasOne("Model.ReferencesModule", "ReferencesModule")
                        .WithMany()
                        .HasForeignKey("ReferencesModuleId");

                    b.HasOne("Model.SponsorCollaboratorsModule", "SponsorCollaboratorsModule")
                        .WithMany()
                        .HasForeignKey("SponsorCollaboratorsModuleId");

                    b.HasOne("Model.StatusModule", "StatusModule")
                        .WithMany()
                        .HasForeignKey("StatusModuleId");
                });

            modelBuilder.Entity("Model.Reference", b =>
                {
                    b.HasOne("Model.ReferenceList", null)
                        .WithMany("Reference")
                        .HasForeignKey("ReferenceListId");

                    b.HasOne("Model.RetractionList", "RetractionList")
                        .WithMany()
                        .HasForeignKey("RetractionListId");
                });

            modelBuilder.Entity("Model.ReferencesModule", b =>
                {
                    b.HasOne("Model.AvailIPDList", "AvailIPDList")
                        .WithMany()
                        .HasForeignKey("AvailIPDListId");

                    b.HasOne("Model.ReferenceList", "ReferenceList")
                        .WithMany()
                        .HasForeignKey("ReferenceListId");

                    b.HasOne("Model.SeeAlsoLinkList", "SeeAlsoLinkList")
                        .WithMany()
                        .HasForeignKey("SeeAlsoLinkListId");
                });

            modelBuilder.Entity("Model.ResultsSection", b =>
                {
                    b.HasOne("Model.AdverseEventsModule", "AdverseEventsModule")
                        .WithMany()
                        .HasForeignKey("AdverseEventsModuleId");

                    b.HasOne("Model.BaselineCharacteristicsModule", "BaselineCharacteristicsModule")
                        .WithMany()
                        .HasForeignKey("BaselineCharacteristicsModuleId");

                    b.HasOne("Model.MoreInfoModule", "MoreInfoModule")
                        .WithMany()
                        .HasForeignKey("MoreInfoModuleId");

                    b.HasOne("Model.OutcomeMeasuresModule", "OutcomeMeasuresModule")
                        .WithMany()
                        .HasForeignKey("OutcomeMeasuresModuleId");

                    b.HasOne("Model.ParticipantFlowModule", "ParticipantFlowModule")
                        .WithMany()
                        .HasForeignKey("ParticipantFlowModuleId");
                });

            modelBuilder.Entity("Model.Retraction", b =>
                {
                    b.HasOne("Model.RetractionList", null)
                        .WithMany("Retraction")
                        .HasForeignKey("RetractionListId");
                });

            modelBuilder.Entity("Model.Root", b =>
                {
                    b.HasOne("Model.FullStudy", "FullStudy")
                        .WithMany()
                        .HasForeignKey("FullStudyId");
                });

            modelBuilder.Entity("Model.SecondaryIdInfo", b =>
                {
                    b.HasOne("Model.SecondaryIdInfoList", null)
                        .WithMany("SecondaryIdInfo")
                        .HasForeignKey("SecondaryIdInfoListId");
                });

            modelBuilder.Entity("Model.SecondaryOutcome", b =>
                {
                    b.HasOne("Model.SecondaryOutcomeList", null)
                        .WithMany("SecondaryOutcome")
                        .HasForeignKey("SecondaryOutcomeListId");
                });

            modelBuilder.Entity("Model.SeeAlsoLink", b =>
                {
                    b.HasOne("Model.SeeAlsoLinkList", null)
                        .WithMany("SeeAlsoLink")
                        .HasForeignKey("SeeAlsoLinkListId");
                });

            modelBuilder.Entity("Model.SeriousEvent", b =>
                {
                    b.HasOne("Model.SeriousEventList", null)
                        .WithMany("SeriousEvent")
                        .HasForeignKey("SeriousEventListId");

                    b.HasOne("Model.SeriousEventStatsList", "SeriousEventStatsList")
                        .WithMany()
                        .HasForeignKey("SeriousEventStatsListId");
                });

            modelBuilder.Entity("Model.SeriousEventStats", b =>
                {
                    b.HasOne("Model.SeriousEventStatsList", null)
                        .WithMany("SeriousEventStats")
                        .HasForeignKey("SeriousEventStatsListId");
                });

            modelBuilder.Entity("Model.SponsorCollaboratorsModule", b =>
                {
                    b.HasOne("Model.CollaboratorList", "CollaboratorList")
                        .WithMany()
                        .HasForeignKey("CollaboratorListId");

                    b.HasOne("Model.LeadSponsor", "LeadSponsor")
                        .WithMany()
                        .HasForeignKey("LeadSponsorId");

                    b.HasOne("Model.ResponsibleParty", "ResponsibleParty")
                        .WithMany()
                        .HasForeignKey("ResponsiblePartyId");
                });

            modelBuilder.Entity("Model.StatusModule", b =>
                {
                    b.HasOne("Model.CompletionDateStruct", "CompletionDateStruct")
                        .WithMany()
                        .HasForeignKey("CompletionDateStructId");

                    b.HasOne("Model.DispFirstPostDateStruct", "DispFirstPostDateStruct")
                        .WithMany()
                        .HasForeignKey("DispFirstPostDateStructId");

                    b.HasOne("Model.ExpandedAccessInfo", "ExpandedAccessInfo")
                        .WithMany()
                        .HasForeignKey("ExpandedAccessInfoId");

                    b.HasOne("Model.LastUpdatePostDateStruct", "LastUpdatePostDateStruct")
                        .WithMany()
                        .HasForeignKey("LastUpdatePostDateStructId");

                    b.HasOne("Model.PrimaryCompletionDateStruct", "PrimaryCompletionDateStruct")
                        .WithMany()
                        .HasForeignKey("PrimaryCompletionDateStructId");

                    b.HasOne("Model.ResultsFirstPostDateStruct", "ResultsFirstPostDateStruct")
                        .WithMany()
                        .HasForeignKey("ResultsFirstPostDateStructId");

                    b.HasOne("Model.StartDateStruct", "StartDateStruct")
                        .WithMany()
                        .HasForeignKey("StartDateStructId");

                    b.HasOne("Model.StudyFirstPostDateStruct", "StudyFirstPostDateStruct")
                        .WithMany()
                        .HasForeignKey("StudyFirstPostDateStructId");
                });

            modelBuilder.Entity("Model.Study", b =>
                {
                    b.HasOne("Model.AnnotationSection", "AnnotationSection")
                        .WithMany()
                        .HasForeignKey("AnnotationSectionId");

                    b.HasOne("Model.DerivedSection", "DerivedSection")
                        .WithMany()
                        .HasForeignKey("DerivedSectionId");

                    b.HasOne("Model.DocumentSection", "DocumentSection")
                        .WithMany()
                        .HasForeignKey("DocumentSectionId");

                    b.HasOne("Model.ProtocolSection", "ProtocolSection")
                        .WithMany()
                        .HasForeignKey("ProtocolSectionId");

                    b.HasOne("Model.ResultsSection", "ResultsSection")
                        .WithMany()
                        .HasForeignKey("ResultsSectionId");
                });

            modelBuilder.Entity("Model.UnpostedAnnotation", b =>
                {
                    b.HasOne("Model.UnpostedEventList", "UnpostedEventList")
                        .WithMany()
                        .HasForeignKey("UnpostedEventListId");
                });

            modelBuilder.Entity("Model.UnpostedEvent", b =>
                {
                    b.HasOne("Model.UnpostedEventList", null)
                        .WithMany("UnpostedEvent")
                        .HasForeignKey("UnpostedEventListId");
                });
#pragma warning restore 612, 618
        }
    }
}
